{"version":3,"sources":["TodoList.js","TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","react_default","a","createElement","className","onSubmit","this","props","addItem","placeholder","ref","inputElement","value","currentItem","text","onChange","handleInput","type","Component","TodoItems","createTasks","item","key","onClick","_this","deleteItem","listItems","entries","map","App","state","items","e","target","Date","now","setState","preventDefault","newItem","console","log","concat","Object","toConsumableArray","filteredItems","filter","React","createRef","src_TodoList","src_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAiBeA,0LAbX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKC,MAAMC,SACzBP,EAAAC,EAAAC,cAAA,SAAOM,YAAY,OAAOC,IAAKJ,KAAKC,MAAMI,aAAcC,MAAON,KAAKC,MAAMM,YAAYC,KAAMC,SAAUT,KAAKC,MAAMS,cACjHf,EAAAC,EAAAC,cAAA,UAAQc,KAAK,UAAb,wBAPWC,cCaRC,6MAZbC,YAAc,SAAAC,GACZ,OAASpB,EAAAC,EAAAC,cAAA,MAAImB,IAAKD,EAAKC,IAAKC,QAAS,kBAAMC,EAAKjB,MAAMkB,WAAWJ,EAAKC,OAAMrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUiB,EAAKP,gFAI1G,IACMY,EADcpB,KAAKC,MAAMoB,QACDC,IAAItB,KAAKc,aAEvC,OAAOnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWsB,UATZR,aCiDTW,6MA7CbC,MAAQ,CACNC,MAAO,GACPlB,YAAa,CAACC,KAAK,GAAIQ,IAAI,OAG7BN,YAAc,SAAAgB,GACb,IACMnB,EAAc,CAACC,KADJkB,EAAEC,OAAOrB,MACWU,IAAKY,KAAKC,OAC/CX,EAAKY,SAAS,CAACvB,mBAGhBL,QAAU,SAAAwB,GACRA,EAAEK,iBACF,IAAMC,EAAUd,EAAKM,MAAMjB,YAC3B,GAAqB,KAAjByB,EAAQxB,KAAa,CACvByB,QAAQC,IAAIF,GACZ,IAAMP,EAAK,GAAAU,OAAAC,OAAAC,EAAA,EAAAD,CAAOlB,EAAKM,MAAMC,OAAlB,CAAyBO,IACpCd,EAAKY,SAAS,CAACL,MAAOA,EAAOlB,YAAa,CAACC,KAAM,GAAIQ,IAAK,UAI9DG,WAAa,SAAAH,GACX,IAAMsB,EAAgBpB,EAAKM,MAAMC,MAAMc,OAAO,SAAAxB,GAC5C,OAAOA,EAAKC,MAAQA,IAEtBE,EAAKY,SAAS,CAACL,MAAOa,OAGxBjC,aAAemC,IAAMC,oFAGnB,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,0CACFF,EAAAC,EAAAC,cAAC6C,EAAD,CAAUxC,QAASF,KAAKE,QAASG,aAAcL,KAAKK,aAAcK,YAAaV,KAAKU,YAAaH,YAAaP,KAAKwB,MAAMjB,cACzHZ,EAAAC,EAAAC,cAAC8C,EAAD,CAAWtB,QAASrB,KAAKwB,MAAMC,MAAON,WAAYnB,KAAKmB,sBAvC/CP,aCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9a8bdc33.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <div className=\"todoListMain\">\n        <div className=\"header\">\n          <form onSubmit={this.props.addItem}>\n            <input placeholder=\"Task\" ref={this.props.inputElement} value={this.props.currentItem.text} onChange={this.props.handleInput}/>\n            <button type=\"submit\"> Add Task </button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TodoList","import React, { Component } from 'react'\n\nclass TodoItems extends Component {\n  createTasks = item => {\n    return ( <li key={item.key} onClick={() => this.props.deleteItem(item.key)}><div className=\"liCont\">{item.text}</div></li> )\n  }\n\n  render() {\n    const todoEntries = this.props.entries\n    const listItems = todoEntries.map(this.createTasks)\n\n    return <ul className=\"theList\">{listItems}</ul>\n  }\n}\n\nexport default TodoItems","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './TodoList.js';\nimport TodoItems from './TodoItems.js';\n\nclass App extends Component {\n  state = {\n    items: [],\n    currentItem: {text:'', key:''},\n  }\n\n  handleInput = e => {\n   const itemText = e.target.value\n   const currentItem = {text: itemText, key: Date.now()}\n   this.setState({currentItem})\n  }\n\n  addItem = e => {\n    e.preventDefault()\n    const newItem = this.state.currentItem\n    if (newItem.text !== \"\") {\n      console.log(newItem)\n      const items = [...this.state.items, newItem]\n      this.setState({items: items, currentItem: {text: '', key: ''}})\n    }\n  }\n\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => { \n      return item.key !== key\n    })\n    this.setState({items: filteredItems})\n  }\n\n  inputElement = React.createRef()\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n            <h1>Todo List</h1>\n            <h3>Type and Click to add Tasks.</h3>\n            <h3>Click on a task to remove it</h3>\n          <TodoList addItem={this.addItem} inputElement={this.inputElement} handleInput={this.handleInput} currentItem={this.state.currentItem}/>\n          <TodoItems entries={this.state.items} deleteItem={this.deleteItem} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}